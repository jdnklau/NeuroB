subprojects {
    apply plugin: 'java'
    apply plugin: 'idea'

    project.version = '0.49.0-SNAPSHOT'
    project.group = 'de.hhu.stups'

    project.sourceCompatibility = '1.11'
    project.targetCompatibility = '1.11'

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name "sonatype snapshots"
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
    }

    sourceSets {
        integrationTest {
            java.srcDir file('src/it/java')
            resources.srcDir file('src/it/resources')
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }

    idea {
        module {
            testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
            testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
        }
    }

    dependencies {
        // ProB dependencies
        implementation 'de.hhu.stups:de.prob2.kernel:4.12.3-SNAPSHOT'

        // DeepLearning4J dependencies
        implementation 'org.deeplearning4j:deeplearning4j-core:1.0.0-beta'

        // for logging
        implementation 'org.slf4j:slf4j-api:1.7.21'
        implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'

        // for hashing
        implementation group: 'commons-codec', name: 'commons-codec', version: '1.11'

        testImplementation "org.mockito:mockito-core:2.+"
        testImplementation 'org.mockito:mockito-junit-jupiter:2.+'
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.2.0'

    }



    configurations {
        all*.exclude group: 'org.bytedeco', module: 'javacpp-presets'

        integrationTestCompile.extendsFrom(testCompile)
        integrationTestRuntime.extendsFrom(testRuntime)
    }

    task integrationTest(type: Test) {
        description = "Run integration tests"

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }

        mustRunAfter(test)
    }

    task wrapper(type: Wrapper) {
        gradleVersion = '4.8'
    }

    test {
        useJUnitPlatform()

        testLogging {
            events "skipped", "failed", "passed"
        }

    }

    integrationTest {
        useJUnitPlatform()

        testLogging {
            events "skipped", "failed", "passed"
        }

    }

    check.dependsOn(integrationTest)
}
